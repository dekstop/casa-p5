plot(data$MORANS_I, xlab=row.names(data))
plot(data$MORANS_I, names.arg=row.names(data))
plot(data$MORANS_I, xlab="Tile Size", ylab="Moran's I", pch=20, col='black', axes=F)#
axis(1,at=(1:nrow(data)),labels=data$TILE_SIZE)
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Tile Size", ylab="Moran's I", pch=20, col='black', par(mar=c(9,5,1,1)))
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Tile Size", ylab="Moran's I", pch=20, col='black', par())
par(mar=c(9,5,1,1))
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Tile Size", ylab="Moran's I", pch=20, col='black')
plot(data$NUM_CENTROIDS, y=data$MORANS_I, xlab="Number of Colour Centroids", ylab="Moran's I", pch=20, col='black')
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Number of Colour Centroids", ylab="Moran's I", pch=20, col='black')
plot(data$TILE_SIZE, y=data$NUM_CENTROIDS_DISCARDED, xlab="Number of Colour Centroids", ylab="Number of Discarded Centroids", pch=20, col='black')
plot(data$TILE_SIZE, y=data$NUM_CENTROIDS_DISCARDED, xlab="Number of Colour Centroids Displayed", ylab="Number of Colour Centroids Discarded", pch=20, col='black')
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black')
plot(data$TILE_SIZE, y=data$NUM_SAMPLES_DISCARDED, xlab="Number of Colour Centroids Displayed", ylab="Number of Colour Samples Discarded", pch=20, col='black')
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black', xlim=c(2,50))
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
plot(data$TILE_SIZE, y=data$SAMPLES_DISCARDED, xlab="Number of Colour Centroids Displayed", ylab="Percentage of Colour Samples Discarded", pch=20, col='black', xlim=c(2, 50))
par(mar=c(5,5,1,1))
plot(data$TILE_SIZE, y=data$NUM_SAMPLES_DISCARDED, xlab="Number of Colour Centroids Displayed", ylab="Number of Colour Samples Discarded", pch=20, col='black', xlim=c(2, 50))
data <- read.delim("diagrams/colour-order/summary.txt")
names(data)
d <- data[which(data$ORDER=='frequency')]
d <- data[which(data$ORDER=='frequency'),]
par(mar=c(5,5,1,1))#
plot(data$NUM_COL, y=data$NUM_CENTROIDS_DISCARDED, xlab="Number of Colour Centroids Displayed", ylab="Number of Colour Centroids Discarded", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$NUM_COL, y=data$NUM_SAMPLES_DISCARDED, xlab="Number of Colour Centroids Displayed", ylab="Number of Colour Samples Discarded", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$NUM_COL, y=data$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
par(mar=c(5,5,1,1))#
plot(d$NUM_COL, y=d$NUM_CENTROIDS_DISCARDED, xlab="Number of Colour Centroids Displayed", ylab="Number of Colour Centroids Discarded", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(d$NUM_COL, y=d$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
d <- data[which(data$ORDER=='frequency'),]#
par(mar=c(5,5,1,1))#
plot(d$NUM_COL, y=d$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
d <- data[which(data$ORDER=='hue'),]#
par(mar=c(5,5,1,1))#
plot(d$NUM_COL, y=d$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
d <- data[which(data$ORDER=='random'),]#
par(mar=c(5,5,1,1))#
plot(d$NUM_COL, y=d$MORANS_I, xlab="Number of Colour Centroids Displayed", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
data
plot(data$TILE_SIZE, y=d$MORANS_I, xlab="Tile Size", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Tile Size", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
data$MORANS_I
data$NUM_SAMPLES_DISCARDED
data <- read.delim("diagrams/tile-size/summary.txt")
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$MORANS_I, xlab="Tile Size", ylab="Moran's I", pch=20, col='black', ylim=c(0,1))
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$NUM_TILES, xlab="Tile Size", ylab="Number of Tiles", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$EFFECTIVE_AREA_GROWTH, xlab="Tile Size", ylab="Effective Area Growth (%)", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$CIRCUMFERENCE_GROWTH, xlab="Tile Size", ylab="Circumference Growth (%)", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$CIRCUMFERENCE_GROWTH, xlab="Tile Size", ylab="Circumference (%)", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$NUM_CENTROIDS_DISCARDED, xlab="Tile Size", ylab="Number of Colour Samples Discarded", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$NUM_CENTROIDS_DISCARDED, xlab="Tile Size", ylab="Number of Colour Centroids Discarded", pch=20, col='black')
par(mar=c(5,5,1,1))#
plot(data$TILE_SIZE, y=data$NUM_SAMPLES_DISCARDED, xlab="Tile Size", ylab="Number of Colour Samples Discarded", pch=20, col='black')
source("/Users/mongo/Documents/code/_visualizations/colournaming/package/hex_map_tesselation.R")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpldHcM6/file42f743c3")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpldHcM6/file42f743c3")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpldHcM6/file7781d98d")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpldHcM6/file7781d98d")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file606483ef")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file606483ef")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file6711f159")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file6711f159")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file4afc3eec")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file4afc3eec")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file76871e69")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file76871e69")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file20ddbc4a")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file20ddbc4a")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file3d74af21")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file3d74af21")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file3795bf0c")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file3795bf0c")
source("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file4831c956")#
unlink("/var/folders/k7/58ls0bls2kv3wm7rgnrlfzt40000gn/T//RtmpRVfZ8y/file4831c956")
source("/Users/mongo/Documents/code/_visualizations/colournaming/scripts/hex_map_tesselation.R")
library(maptools)#
library(ggplot2)#
library(RColorBrewer)#
library(classInt)#
library(gpclib)#
#
setwd("/Users/mongo/Documents/casa/gis/practicals/Practical_2_data")
setwd("/Users/mongo/Documents/casa/archive/gis/practicals/Practical_2_data")
sport <- readShapePoly("london_sport.shp")
plot(sport)
head(sport)
info(sport)
sport$ons_label
sport
summary(sport)
sport$Partic_Per
sport$Pop_2001
sport@data
sport@polygons
plot(sport@polygons)
summary(sport@polygons)
length(sport$name)
plot(sport@polygons[1])
plot(sport@polygons[1,])
summary(sport@polygons[1])
sport@polygons[1]["coords"]
sport@polygons[1]$coords
sport@polygons[1]$Polygons
sport@polygons[1]@Polygons
t <- sport@polygons[1]
sport@polygons[1]
t <- (sport@polygons[1])
names(sport@polygons[1])
sport@polygons$coords
sport@polygons@coords
sport@polygons[1]@coords
sport@polygons[1,]@coords
sport@polygons[,1]@coords
sport@polygons[[1]]@coords
sport@polygons[[1]]
t <- sport@polygons[[1]]
names(t)
t
t@Polygons@coords
names(t@Polygons)
t@Polygons
u <- t@Polygons
u
u[[1]]
u[[1]]@coords
t@Polygons[[1]]@coords
# sport@polygons[[1]]@Polygons[[1]]@coords
for (a in 1:length(sport@polygons)) {
  p <- sport@polygons[[a]]
  names(a)
}
for (a in 1:length(sport@polygons)) {#
  p <- sport@polygons[[a]]#
  print(names(a))#
}
for (a in 1:length(sport@polygons)) {#
  p <- sport@polygons[[a]]#
  print(summary(a))#
}
for (a in 1:length(sport)) {#
  p <- sport@polygons[[a]]#
  print(summary(a))#
}
for (a in 1:length(sport)) {#
  p <- sport@polygons[[a]]#
  print(sport$name[[a]])#
}
for (a in 1:length(sport)) {#
  p <- sport@polygons[[a]]#
  print(sport$name[a])#
}
sport$name[[1]]
sport$name[1,]
(sport$name)[1]
sport$name[1:]
sport$name[1:1]
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]#
  for (b in 1:length(p)) {#
    print(p[b])#
  }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]#
  for (b in 1:length(p)) {#
    print(p@Polygons[[b]]@coords)#
  }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]#
  for (b in 1:length(p)) {#
    print(p@Polygons[[b]]@coords)#
  }#
}for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]#
  print(length(p))#
  # for (b in 1:length(p)) {#
  #   print(p@Polygons[[b]]@coords)#
  # }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]#
  print(length(p))#
  # for (b in 1:length(p)) {#
  #   print(p@Polygons[[b]]@coords)#
  # }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]#
  print(length(p@Polygons[[1]]@coords))#
  # for (b in 1:length(p)) {#
  #   print(p@Polygons[[b]]@coords)#
  # }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons[[1]]@coords#
  print(length(p))#
  # for (b in 1:length(p)) {#
  #   print(p@Polygons[[b]]@coords)#
  # }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons[[1]]@coords#
  print(length(p))#
  for (b in 1:length(p)) {#
    print(n, p[[b]])#
  }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons[[1]]@coords#
  print(length(p))#
  for (b in 1:length(p)) {#
    print(p[[b]])#
  }#
}
sport@polygons[[1]]@Polygons[[1]]@coords
sport@polygons[[1]]@Polygons[[1]]@coords[,1]
sport@polygons[[1]]@Polygons[[1]]@coords[,2]
sport@polygons[[1]]@Polygons[[1]]@coords[1]
sport@polygons[[1]]@Polygons[[1]]@coords[2]
sport@polygons[[1]]@Polygons[[1]]@coords[1,1]
sport@polygons[[1]]@Polygons[[1]]@coords[1,2]
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons[[1]]@coords#
  print(length(p))#
  for (b in 1:length(p)) {#
    x <- p[[b, 1]]#
    y <- p[[b, 2]]#
    print(x, y, name)#
  }#
}
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons[[1]]@coords#
  print(length(p))#
  for (b in 1:length(p)) {#
    x <- p[[b, 1]]#
    y <- p[[b, 2]]#
    print(x, y)#
  }#
}
'a' + 'b'
'a' . 'b'
d <- data.frame()
d <- data.frame(name=c(), x=c(), y=c())
names(d)
d$x
d <- data.frame(c(), row.names=c('name', 'x', 'y'))
?data.frame
d <- data.frame(name=c('a'), x=c(1), y=c(2))
d
a
c(a, 2)
a <- c(a, 2)
length(a)
a[2]
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons[[1]]@coords#
  for (b in 1:length(p)) {#
    names <- c(names, n)#
    x <- c(x, p[[b, 1]])#
    y <- c(y, p[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
y
sport$name[1]
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons[[1]]@coords#
  for (b in 1:length(p)) {#
    # names <- c(names, n)#
    x <- c(x, p[[b, 1]])#
    y <- c(y, p[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
x
x[0]
x[1]
sport@polygons[[1]]@Polygons[[1]]@coords[2,2]
sport@polygons[[1]]@Polygons[[1]]@coords[20,2]
sport@polygons[[2]]@Polygons[[1]]@coords[20,2]
sport@polygons[[2]]@Polygons[[1]]@coords[20,1]
sport@polygons[[2]]@Polygons[[1]]@coords[20,]
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons#
  c <- [[1]]@coords#
  for (b in 1:length(c)) {#
    # names <- c(names, n)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  for (b in 1:length(c)) {#
    # names <- c(names, n)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
# sport@polygons[[1]]@Polygons[[1]]@coords#
#
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  for (b in 1:length(c)) {#
    # names <- c(names, n)#
    x <- c(x, c[[b]])#
    y <- c(y, c[[b]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
# sport@polygons[[1]]@Polygons[[1]]@coords#
#
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  print(a)#
  for (b in 1:length(c)) {#
    # names <- c(names, n)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
sport@polygons[[2]]@Polygons[[1]]@coords
length(sport@polygons[[2]]@Polygons[[1]]@coords)
length(sport@polygons[[2]]@Polygons[[1]]@coords[1])
length(sport@polygons[[2]]@Polygons[[1]]@coords[1,])
length(sport@polygons[[2]]@Polygons[[1]]@coords[,1])
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  print(a)#
  for (b in 1:length(c[,1])) {#
    # names <- c(names, n)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[a]#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  print(a)#
  for (b in 1:length(c[,1])) {#
    names <- c(names, n)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
plot(d)
?write.csv
write.csv(d, file="boroughs.txt", quote=FALSE, sep="\t")
write.csv(d, file="boroughs.txt", quote=FALSE, sep=" ")
write.csv(d, file="boroughs.txt", quote=FALSE, sep="\\t")
write.csv2(d, file="boroughs.txt", quote=FALSE, sep="\\t")
write.csv2(d, file="boroughs.txt", quote=FALSE, row.names=FALSE)
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- sport$name[[a]]#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  for (b in 1:length(c[,1])) {#
    names <- c(names, n)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)
write.csv(d, file="boroughs.txt", quote=FALSE, row.names=FALSE)
names
names <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  n <- a #sport$name[[a]]#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  for (b in 1:length(c[,1])) {#
    names <- c(names, n)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(name=names, x=x, y=y)#
write.csv(d, file="boroughs.txt", quote=FALSE, row.names=FALSE)
ids <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  id <- a#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  for (b in 1:length(c[,1])) {#
    ids <- c(ids, id)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(id=ids, name=names, x=x, y=y)#
write.csv(d, file="boroughs.txt", quote=FALSE, row.names=FALSE)
names = sport$names[ids]
sport$names[ids]
sport$names
sport$name
sport$name[ids]
ids <- c()#
x <- c()#
y <- c()#
#
for (a in 1:length(sport@polygons)) {#
  id <- a#
  p <- sport@polygons[[a]]@Polygons#
  c <- p[[1]]@coords#
  for (b in 1:length(c[,1])) {#
    ids <- c(ids, id)#
    x <- c(x, c[[b, 1]])#
    y <- c(y, c[[b, 2]])#
  }#
}#
#
d <- data.frame(id=ids, name=sport$name[ids], x=x, y=y)#
write.csv(d, file="boroughs.txt", quote=FALSE, row.names=FALSE)
?spTransform
library(sp)
spTransform
library(rgdal)
install.packages("rgdal")
source("/Users/mongo/Documents/code/Processing/casa/vis04/map/convert.R")
